import re
import time

import psycopg2
from selenium import webdriver
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.support.ui import WebDriverWait

website = "http://localhost/auth/register"

# Th√¥ng tin k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
db = psycopg2.connect(
    dbname="od-tech-shop-local",
    user="od-tech-shop-user",
    password="od-tech-shop-password",
    host="localhost",
    port="5432",
)
cursor = db.cursor()

# Initialize WebDriver
service = Service("geckodriver.exe")
driver = webdriver.Firefox(service=service)
driver.maximize_window()
driver.implicitly_wait(5)


def is_user_exist(phone_number):
    cursor.execute("SELECT phone_number FROM users WHERE phone_number = %s LIMIT 1", (phone_number,))
    return cursor.fetchone() is not None


def fill_input(field, value):
    field.send_keys(value)
    WebDriverWait(driver, 3).until(lambda d: field.get_attribute("value") == value)
    return field.get_attribute("value")


def validate_phone(phone_number):

    phone_pattern = r"0\d{9,11}|84\d{8,10}"
    repeated_pattern = r"^(\d)\1+$"

    if re.fullmatch(phone_pattern, phone_number) and not re.fullmatch(repeated_pattern, phone_number):
        print(f"{phone_number}: ‚úÖ H·ª£p l·ªá")
        return True
    else:
        print(f"{phone_number}: ‚ùå Kh√¥ng h·ª£p l·ªá")
        return False


def validate_password(password):
    pattern = r"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])\S{8,}$"
    if re.fullmatch(pattern, password):
        print(f"{password}: ‚úÖ H·ª£p l·ªá")
        return True
    else:
        print(f"{password}: ‚ùå Kh√¥ng h·ª£p l·ªá")
        return False


def run_test_case(phone_number, password, confirm_password):
    user_exist = is_user_exist(phone_number)

    if user_exist:
        print(f"{phone_number}: ‚ö†Ô∏è  S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i!")
        return
    else:
        if not user_exist:
            print("Ti·∫øn h√†nh ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi...")

    driver.get(website)
    form = driver.find_element("xpath", '//form[@method="post"]')

    phone_input = form.find_element("xpath", './/input[@name="phone_number"]')
    phone_filled = fill_input(phone_input, phone_number)
    password_input = form.find_element("xpath", './/input[@name="password"]')
    password_filled = fill_input(password_input, password)
    confirm_password_input = form.find_element("xpath", './/input[@id="password_confirm"]')
    confirm_password_filled = fill_input(confirm_password_input, confirm_password)

    register_button = form.find_element("xpath", './/button[@type="submit"]')
    register_button.click()

    print(phone_filled, password_filled, confirm_password_filled)
    phone_valid = validate_phone(phone_number)
    password_valid = validate_password(password)

    if confirm_password != password:
        print("M·∫≠t kh·∫©u kh√¥ng kh·ªõp, nh·∫≠p l·∫°i üìù")
    else:
        if (phone_valid and password_valid) and confirm_password == password:
            print("M·∫≠t kh·∫©u kh·ªõp ‚úîÔ∏è")

    if phone_valid and password_valid and confirm_password == password:
        print("ƒêƒÉng k√≠ th√†nh c√¥ng ü•∞ü•∞")
    else:
        if not phone_valid:
            print("üìµ ƒêƒÉng k√≠ th·∫•t b·∫°i: S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
        if not password_valid:
            print("üîë ƒêƒÉng k√≠ th·∫•t b·∫°i: M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá")


# Running multiple test cases
def main():
    test_cases = [
        # test s·ªë ƒëi·ªán tho·∫°i
        ("0898@134", "kimoanh2003", "kimoanh2003"),  # ch·ª©a k√≠ t·ª± ƒë·∫∑c bi·ªát
        ("0898abc134", "kimoanh2003", "kimoanh2003"),  # ch·ª©a k√≠ t·ª±
        ("abc0898134", "kimoanh2003", "kimoanh2003"),  # ch·ª©a k√≠ t·ª±
        ("0898134abc", "kimoanh2003", "kimoanh2003"),  # ch·ª©a k√≠ t·ª±
        ("0785 467765", "kimoanh2003", "kimoanh2003"),  # ch·ª©a kho·∫£ng tr·∫Øng
        ("00000000000", "kimoanh2003", "kimoanh2003"),  # ch·ª©a nhi·ªÅu s·ªë gi·ªëng nhau
        ("089816715", "kimoanh2003", "kimoanh2003"),  # ƒë·ªô d√†i kh√¥ng ƒë·ªß
        ("123456789", "kimoanh2003", "kimoanh2003"),  # sai ƒë·ªãnh d·∫°ng
        ("0914406376", "kimoanh2003", "kimoanh2003"),  # ƒë√£ t·ªìn t·∫°i
        ("8478526498", "Kimoanh2003@", "Kimoanh2003@"),  # h·ª£p l·ªá
        # test m·∫≠t kh·∫©u
        ("0784253466", "12345678", "12345678"),  # ch·ªâ c√≥ s·ªë
        ("0784253466", "abcdefgh", "abcdefgh"),  # ch·ªâ c√≥ ch·ªØ th∆∞·ªùng
        ("0784253466", "ABCDEFGH", "ABCDEFGH"),  # ch·ªâ c√≥ ch·ªØ hoa
        ("0784253466", "@#$%^&*!", "@#$%^&*!"),  # ch·ªâ c√≥ k√≠ t·ª±
        ("0784253466", "ABCD1234", "ABCD1234"),  # kh√¥ng c√≥ ch·ªØ th∆∞·ªùng v√† k√≠ t·ª± ƒë·∫∑c bi·ªát
        ("0784253466", "1234@#$%", "1234@#$%"),  # kh√¥ng c√≥ ch·ªØ hoa v√† ch·ªØ th∆∞·ªùng
        ("0784253466", "abcd@#$%", "abcd@#$%"),  # kh√¥ng c√≥ ch·ªØ hoa v√† s·ªë
        ("0784253466", "abcdABCD", "abcdABCD"),  # kh√¥ng c√≥ s·ªë v√† k√≠ t·ª± ƒë·∫∑c bi·ªát
        ("0784253466", "ABCD@#$%", "ABCD@#$%"),  # kh√¥ng c√≥ s·ªë v√† ch·ªØ th∆∞·ªùng
        ("0784253466", "P@ss w0rd1", "P@ss w0rd1"),  # ch·ª©a kho·∫£ng c√°ch
        # test confirm pass
        ("0784253466", "P@ssw0rd1", ""),  # b·ªè tr·ªëng
        ("0784253466", "P@ssw0rd1", "L@ssw0rd1"),  # Kh√¥ng kh·ªõp
        ## h·ª£p l·ªá
        ("0784253466", "P@ssw0rd1", "P@ssw0rd1"),  # h·ª£p l·ªá
    ]

    for case in test_cases:
        run_test_case(*case)
        time.sleep(3)  # Wait between test cases


if __name__ == "__main__":
    try:
        main()
    finally:
        driver.quit()
        cursor.close()
        db.close()
        db.close()
