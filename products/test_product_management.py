import os
import sys
import time

from selenium import webdriver
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.support.ui import WebDriverWait

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import db_connection

# URLs
LOGIN_URL = "http://localhost/auth/login"

# Kh·ªüi t·∫°o database
db = db_connection.get_db_connection()
cursor = db.cursor()

# Kh·ªüi t·∫°o WebDriver
service = Service("geckodriver.exe")
driver = webdriver.Firefox(service=service)
driver.maximize_window()
driver.implicitly_wait(5)  # Ch·ªù t·ªëi ƒëa 5 gi√¢y khi t√¨m element


def fill_input(field, value):
    field.clear()
    field.send_keys(value)
    WebDriverWait(driver, 5).until(lambda d: field.get_attribute("value") == value)
    return field.get_attribute("value")


def login():
    """Th·ª±c hi·ªán ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng."""
    driver.get(LOGIN_URL)
    time.sleep(3)
    # T√¨m form ƒëƒÉng nh·∫≠p
    form = WebDriverWait(driver, 5).until(lambda d: d.find_element("xpath", '//form[@method="post"]'))

    # ƒêi·ªÅn s·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u
    phone_input = form.find_element("xpath", './/input[@name="phone_number"]')
    phone_filled = fill_input(phone_input, "0784253460")

    password_input = form.find_element("xpath", './/input[@name="password"]')
    password_filled = fill_input(password_input, "Kimoanh2003@")

    # Click n√∫t ƒëƒÉng nh·∫≠p
    login_button = form.find_element("xpath", './/button[@type="submit"]')
    login_button.click()

    time.sleep(3)  # Ch·ªù trang load

    if driver.current_url != LOGIN_URL:
        print(f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Chuy·ªÉn ƒë·∫øn {driver.current_url}")
    else:
        print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!")


def validate_test_case(name, price, image_path):
    """Ki·ªÉm tra l·ªói test case theo logic c·ªßa h·ªá th·ªëng"""
    errors = []
    if not name:
        errors.append("‚ö† L·ªói: Thi·∫øu t√™n s·∫£n ph·∫©m")

    # Ki·ªÉm tra gi√° s·∫£n ph·∫©m
    try:
        price = int(price)
        if price < 0:
            errors.append("‚ö† L·ªói: Gi√° tr·ªã kh√¥ng ƒë∆∞·ª£c √¢m")
        elif price == 0:
            errors.append("‚ö† L·ªói: Gi√° tr·ªã kh√¥ng ƒë∆∞·ª£c b·∫±ng 0")
    except ValueError:
        errors.append("‚ö† L·ªói: Gi√° tr·ªã kh√¥ng h·ª£p l·ªá")

    if image_path:
        abs_image_path = os.path.abspath(image_path)
        if not os.path.exists(abs_image_path):
            errors.append(f"‚ö† L·ªói: File ·∫£nh kh√¥ng t·ªìn t·∫°i - {abs_image_path}")
        elif not image_path.lower().endswith((".png", ".jpg", ".jpeg")):
            errors.append("‚ö† L·ªói: ƒê·ªãnh d·∫°ng file ·∫£nh kh√¥ng h·ª£p l·ªá (ch·ªâ ch·∫•p nh·∫≠n JPG, PNG)")

    return errors


def run_test_case(name, price, image_path):
    login()
    time.sleep(5)
    admin_button = driver.find_element("xpath", '//a[@href="/users/"]')
    admin_button.click()
    product_manager_button = driver.find_element("xpath", '//a[@href="/products/"]')
    product_manager_button.click()

    form = WebDriverWait(driver, 5).until(lambda d: d.find_element("xpath", '//form[@enctype="multipart/form-data"]'))

    # ƒêi·ªÅn t√™n s·∫£n ph·∫©m
    input_name = form.find_element("xpath", './/input[@name="name"]')
    fill_input(input_name, name)

    # ƒêi·ªÅn gi√°
    input_price = form.find_element("xpath", './/input[@name="price"]')
    fill_input(input_price, str(price))

    # Upload ·∫£nh
    if image_path:
        abs_image_path = os.path.abspath(image_path)
        if os.path.exists(abs_image_path):
            input_image = form.find_element("xpath", './/input[@name="thumbnail_image"]')
            input_image.send_keys(abs_image_path)
        else:
            print(f"‚ö† L·ªói: File ·∫£nh kh√¥ng t·ªìn t·∫°i - {abs_image_path}")

    # Submit form
    submit_button = form.find_element("xpath", './/button[@type="submit"]')
    submit_button.click()

    driver.get("http://localhost/products/")

    error_messages = validate_test_case(name, price, image_path)
    if name and price and name.lower() not in driver.page_source.lower():
        error_messages.append("‚ö† L·ªói: S·∫£n ph·∫©m kh√¥ng hi·ªÉn th·ªã trong danh s√°ch (c√≥ th·ªÉ do tr√πng t√™n)")

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ test case
    print("=" * 60)
    print(f"üîé **Ch·∫°y Test Case**: {name} - {price}")

    if error_messages:
        print(f"‚ùå Test Case FAILED: {name} - {price}")
        for msg in error_messages:
            print("   " + msg)
    else:
        print(f"‚úÖ Test Case PASSED: {name} - {price}")

    time.sleep(2)  # Ch·ªù 2 gi√¢y tr∆∞·ªõc khi ch·∫°y test case ti·∫øp theo

    print(f"‚úÖ Th√™m s·∫£n ph·∫©m: {name} - {price}")
    time.sleep(2)


def main():

    test_cases = [
        ("iPhone 14 Pro Max", 30000000, "media/iphone_14_pro_max.png"),  # h·ª£p l·ªá
        ("iPhone 14 Pro Max", 30000000, "media/iphone_14_pro_max.png"),  # tr√πng key
        ("", 30000000, ""),  # tr·ªëng t√™n s·∫£n ph·∫©m
        ("iPhone 16 Pro Max", "", "media/iphone-16-pro-tu-nhien-1.png"),  # tr·ªëng gi√°
        ("iPhone 16 Pro Max", "50000000d", ""),  # sai ƒë·ªãnh d·∫°ng gi√°
        ("iPhone 16 Pro Max", -50000000, ""),  # sai ƒë·ªãnh d·∫°ng gi√°
        ("iPhone 16 Pro Max", 50000.000, ""),  # sai ƒë·ªãnh d·∫°ng gi√°
        ("iPhone 16 Pro Max", 0, ""),  # sai ƒë·ªãnh d·∫°ng gi√°
        ("iPhone 16 Pro Max", 1, "media/speaking-writing-sample-tests IIG.pdf"),  # sai ƒë·ªãnh d·∫°ng ·∫£nh
    ]

    for case in test_cases:
        run_test_case(*case)
        time.sleep(3)  # Ch·ªù gi·ªØa c√°c test case


if __name__ == "__main__":
    try:
        main()
    finally:
        driver.quit()  # ƒê√≥ng tr√¨nh duy·ªát
        cursor.close()
        db.close()
